from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import TypeVar, Generic

import numpy as np

__all__ = ["ProblemSolution", "ProblemSolver"]

_TParams = TypeVar("_TParams")


@dataclass
class ProblemSolution(object):
    """
    Data class storing information about a solution given by a specific solver.

    For more details, see ProblemSolver.
    """

    predictions: np.ndarray


class ProblemSolver(Generic[_TParams], ABC):
    """
    An object that stores dataset at creation, receives train parameters when solve(), and outputs a solution
    containing accuracy, classification, etc.

    This abstraction is defined to be finetune-d by optuna. Conventionally, when solve() is called, a model is
    trained from the ground up on train dataset with new parameters generated by optuna and predictions are made on
    test dataset. A ProblemSolution is returned, which contains the prediction, accuracy, and some extra data to tell
    the optuna how this trial doing.
    """

    @abstractmethod
    def solve(self, params: _TParams) -> ProblemSolution:
        pass
